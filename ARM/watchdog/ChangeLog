CHANGES
=======

* hotfix mixed content warning
* hotfix manifest typo
* disable tr with env vale TR\_DISABLED
* openvpn test
* hotfix nginx arm image
* keep prod deps, yarn screws up hoisting
* dont hoist dotenv-safe
* compile and then rm dev dependencies, install prod deps
* cache bust
* nginx conf for vue proxy
* fix patbs
* use entrypoint
* On boot, move static vue files to /data/www and serve from nginx
* fix bust url
* cache bust
* minimize
* add back nginx
* dockerfile triage
* minimize
* prisma build
* gen dockerfiles
* prettify config print
* pin ffmpeg version
* bump node to 11, cleanup remote docker repos
* move manager to https://github.com/kazazes/skyscraper
* copy after generate
* symlink prisma files
* prisma init
* vue ui
* switch to vuetify admin
* Bump webpack from 4.28.3 to 4.28.4 in /host-images/manager
* Bump lerna from 3.10.1 to 3.10.5 in /host-images/manager
* Bump tslint from 5.12.0 to 5.12.1 in /host-images/manager
* Bump @vue/cli-plugin-typescript
* Bump lerna from 3.8.1 to 3.10.1 in /host-images/manager
* Bump vuetify from 1.4.0 to 1.4.1 in /host-images/manager
* :Merge branch 'master' of github.com:kazazes/skyscraper into HEAD
* prisma base img
* bump node version
* Revert "elementary init"
* elementary init
* just use default sed
* prettyprint config
* pin ffmpeg version
* no cpusets for amd hosts
* keyscan github.com
* set config remote to github
* Bump vuetify from 1.3.15 to 1.4.0 in /host-images/manager
* Bump webpack from 4.27.1 to 4.28.3 in /host-images/manager
* Bump lerna from 3.6.0 to 3.8.1 in /host-images/manager
* Bump pino from 5.10.1 to 5.10.5 in /host-images/manager
* Bump @vue/cli-plugin-typescript
* Bump @types/node from 10.12.15 to 10.12.18 in /host-images/manager
* Bump @vue/cli-plugin-babel from 3.2.0 to 3.2.2 in /host-images/manager
* Bump tslint from 5.11.0 to 5.12.0 in /host-images/manager
* Bump lint-staged from 7.3.0 to 8.1.0 in /host-images/manager
* Bump concat-stream from 1.6.2 to 2.0.0 in /host-images/manager
* Bump @fortawesome/fontawesome-free
* Bump vuetify from 1.3.14 to 1.3.15 in /host-images/manager
* [Security] Bump webpack-dev-server
* ...gen dockerfiles
* don't crossbuild t-r
* fix gnu sed alias
* use remote openwebrx
* rm csdr
* de-init submodules
* Revert "include repos"
* include repos
* add webrx
* add prometheus
* node-red needs mqtt
* update cpusets -- give priority to t-r
* with added swap, trunk-recorder won't run OOM
* enable cross-building
* use regular gce instances so I don't get another $1000 bill
* rm bladerf base image
* specify arch  because manifests stopped working?
* portainer
* disable systemd in t-r
* give t-r only one thread..
* prevent t-r build OOM
* resin -> balena
* clean comments and whitespace from generated dockerfiles
* no cpuset
* no cpuset
* try another cpuset strategy
* give recorder all cores
* fix cpu shares
* increase cpu shares
* typo
* typo
* slim
* no wifi connect
* use rpi nginx
* wifi connect
* nginx multiarch
* wifi connect
* reserve 0-3 for t-r
* remove cpu quota
* adjust cpushares
* jk
* crapshot prom stack
* crapshot prom stack
* multistage manager build, dont copy fpga to debugger
* no need to add fpga img
* debugger
* make trunk recorder build type release
* use shares and quota
* try cpu\_shares
* set cpu quota
* decrease tr swappiness
* give trunk-recorder all CPUs
* use proper port prom
* rm dangling code
* copy vue public in one swoop
* set proxy pass header
* proxy pass to prometheus
* use local blade img
* prometheus compose
* prometheus compose
* prometheus compose
* prometheus compose
* turn off nginx for a second
* debug t-r start script
* slimmer
* slim it all down
* serve vue from serperate dir
* hotfix upstream location
* no prisma, for now
* add manager upstream
* get rid of frontend network
* add nginx link to manager
* a ghost removed all of my '\'s
* use store fpga, reference env for config file
* ibid
* refactor node manager to monorepo
* web heatmap
* don 't use alpine nginx'
* default env values
* Use local or default dotenv
* hotfix node-red proxy pass
* hotfix node version
* hotfix node base image
* hotfix static frontend
* nginx hotfix
* multi-arch nginx/api/frontend
* vue frontend and swagger API server init
* pass directory to docker generation script
* hotfix template machine name
* house keeping
* gulp watch dockerfile templates
* get rid of extraneous images
* CD chart
* sleep after starting influx
* influd enable systemd
* debug container privileged
* mount data volume in debug image
* make influx start scripts exec'able
* make influx privileged
* use persistent volume for influx
* start and sleep debug container
* get rid of cpuset for recorder for now
* start and sleep debug container
* add telegraf entrypoint
* use telegraf dockerfile
* add util debug image
* try some other hobo's influxdb dockerfile
* give influx it's own volume
* revert
* use systemd
* arm drives me cooocoo
* cross build
* build deps
* build influx from scratch
* tidy up confs
* multi arch
* hotfix
* build context
* no node-test
* fix volumes
* node-red-mqtt-nginx-TIG-stack
* node-red credentials
* node-red
* specify armv7l for volk
* lower rates again
* no data browser
* get rid of trunk-player
* aliases do not work
* cpuset  is 0 indexed..
* mas cpus
* use root instead of alias
* increase recorder cpu priority
* hotfix
* migrate before adding admin
* add trunk-player admin at build
* add default trunkplayer admin
* ports should be an array
* expose trunk-player ports
* make ffmpeg with nproc
* compile ffmpeg from src
* yay
* liftoff
* use the write image
* don't install recomended packages with fpga img
* regen dockerfiles
* missing \
* install blade fpga from ppa, use sh for scripts in alpine
* debug recorder
* back on the road. docker refactor complete
* generate multi-arch compose files
* these are not the paths you were looking for
* use existing tmux window for build log stream
* use cached amd image, force qemu to use more than one core
* do not run volk profile during a remote build
* hotfix ampersand typo
* seperate dep installation from top level packages
* pybombs needs python2... too
* use Nuand's osmosdr fork
* these python deps, man...
* hand-roll python deps
* regen dockerfiles
* ibid
* better log script
* let pybombs install python deps
* cleanup
* hotfix
* !!
* debug gnuradio issues
* disable gnuradio companion
* plz build qemu
* gen new files
* qemu builds
* fix paths
* hotfix
* try pybombs based docker images
* fix url typo
* qemu reports one core
* install osmo from ppa
* woah i was confused for a while there..
* smaller install
* use image in cache
* use at least 8 threads, qemu shows 1 core
* don't track me
* dont pull, we cant yet..
* no readline in build-gnuradio
* whoops
* whoops
* update generated dockerfiles
* get fresh gnuradio script
* can't pull what you don't have... yet
* missing "
* cloudbuild confs
* don't install soapysdr-server
* ibid
* hotfix google push
* purge apt-fast, push to google source repo for docker builds
* use apt instead of apt-fast
* trim off the fat
* trim off the fat
* add docker-in-d
* install uhd with gnuradio
* inline build script
* inline build script
* inline build script
* inline build script
* inline build script
* inline build script
* inline build script
* inline build script
* inline build script
* inline build script
* inline build script
* inline build script
* inline build script
* inline build script
* inline build script
* inline build script
* typo
* Multi-platform container images and build scripts
* dynamic conf path
* remove tether
* typo
* tether
* disable wifi-connect until we have a good dongle
* data browser
* remove un-needed compose labels
* don't start wifi
* don't restart wifi
* force recorder rebuild
* hotfix wifi
* hotfix wifi
* hotfix wifi
* hotfix wifi
* hotfix wifi
* hotfix wifi
* wifi-connect hotfix
* ibid
* fix paths
* Update .gitlab-ci.yml
* Update .gitlab-ci.yml
* Update .gitlab-ci.yml
* Update .gitlab-ci.yml
* Update .gitlab-ci.yml
* Update .gitlab-ci.yml
* Update .gitlab-ci.yml
* Add .gitlab-ci.yml
* trunk recorder and player
* use latest tag
* no manager in hosted balena
* wifi privledged
* clusterfuck of whales
* add wifi-connect
* clusterfuck of whales
* gnuradio script wip
* soapyremote fixes
* soapyremote
* soapyremote
* soapyremote
* soapyremote
* soapyremote
* soapyremote
* remove data browser
* create arm nginx image
* create arm nginx image
* create arm nginx image
* create arm nginx image
* add deps for node-gyp
* add python for node-gyp
* add manager
* audio path
* rsync
* copy entrypoint last
* fix static dir
* expose all data
* don't mount data to redis
* install trunk player on both
* install trunk player on both
* install trunk player on both
* install trunk player on both
* copy encode script
* copy encode script
* postgress official
* data browser
* data browser
* data browser
* don't copy trunkplayer to data
* don't copy trunkplayer to data
* copy trunkplayer to data
* qemu doesnt use multiple cores anyway
* set dir in entrypoint
* redis persistance
* redis persistance
* cache that man!
* cloudbuild config
* whoopsie
* use new pybombs base image
* cloudbuild config
* cloudbuild config
* cloudbuild config
* cloudbuild config
* cloudbuild config
* cloudbuild config
* cloudbuild config
* cloudbuild config
* give containers their own root directories
* change dir structure
* sep steps
* combine steps
* split up  steps  for now
* split up  steps  for now
* use tagged gnuradio
* use tagged gnuradio
* allow uhd
* allow uhd
* allow uhd
* xenial minimal
* xenial minimal
* force build minimal image first
* slim
* skip uhd
* pybombs minimal
* slim pyboms image
* simple server init
* keep src around....
* keep src around
* download pybombs pre-compiled and encode
* allow all hosts

v0.1
----

* zomg
* balena you really need to get your local build game going..
* losing hope
* give ubuntu a try?
* doh
* this is getting silly
* this is getting silly
* this is getting silly
* this is getting silly
* soooo many blanks
* copy config at runtime
* copy config at runtime
* expose port 80 of nginx
* more blanks
* shooting blanks
* fix conf path
* nginx env system on
* use debian stretch for nginx
* just use full jessie img
* symlink std to log
* rm glances
* fix trunkplayer config path
* et....c
* rm before ln
* docker base image with symlink to conf
* docker base image with symlink to conf
* try nginx base image
* no bind mounts
* no bind mounts
* give glances a go
* make start execable
* use pybombs cli instead of editing recipe
* use last bladerf release, master is broken
* hush redis error
* gnuradio conf
* nginx cmd
* push task
* fix trunk-player  settings path
* nginx needs ; in cmd
* make sure static dir exists
* fix cmd
* give nginx a shot
* postgres pid
* don't cache pip
* ensure data dir exists
* fix path
* make postgres entrypoint execable
* remove generated, make redis entry execuatable
* add redis entrypoint
* add redis to dockerfile
* add redis
* verify postgres
* missing dockerfile
* hotfix config
* hotfix nginx
* hotfix missing pkgs
* hotfix missing pkgs
* hotfix missing pkgs
* postgres amd64
* pg version
* take two
* fix source image
* whoops
* entry point
* postgres amd64
* need full nginx image
* source venv
* start player
* postgres lib
* postgres lib
* trunk player init
* clone last
* rebuild.
* fix workdir
* rebuild
* audio directory
* load fpga image
* recorder params
* hotfix
* start script update
* missing the -y
* guess we need doxygen for now
* force install doxygen
* consolidation
* don't restart config
* typo in config path
* don't write to /data during build
* don't restart config
* make config image
* make config image
* test compose
* combine pybombs install steps
* no install recommends
* no install recommends
* generate locales
* clone trunk-recorder
* hotfix: don't install op25
* trunk recorder build
* init
* init
